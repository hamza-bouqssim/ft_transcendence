generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Status {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Result {
  WIN
  LOSS
  UNPROCESSED
}

enum EventType {
  UNPROCESSED
  FINAL
}

model User {
  id String @id @default(uuid())
  username String 
  status String @default("offline")
  email String @unique
  password String
  display_name String @unique
  avatar_url String
  two_factor_auth String
  first_time Boolean @default(true)
  two_factor_secret_key String
  tfa_enabled Boolean @default(false)
  friend Friend[] @relation("UserToFriend")
  friends Friend[] @relation("Friend")
  senderOfChatParticipents ChatParticipents[] @relation("sender")
  recipientOfChatParticipents ChatParticipents[] @relation("recipient")
  senderNotif NotificationGlobal[] @relation("sender")
  recipientNotif NotificationGlobal[] @relation("recipient")
  senderPlay requestPlay[] @relation("sender_playing")
  recipientPlay requestPlay[] @relation("recipient_playing")
  senderNotifMessage NotificationMessage[] @relation("senderMessage")
  senderOfmessage Message[] @relation("senderMessage")
  blockUserOne    blockList[] @relation("userOne")
  blockUserTwo    blockList[] @relation("userTwo")
  Member  Member[]
  blockingUsers       BlockUser[] @relation("blockingUsers")
  blockedByUsers      BlockUser[] @relation("blockedByUsers")
  messageRome  MessageRome[]
  StateGame                   StateGame?
  MatchHistory1               Match_History[]    @relation("playerOne")
  MatchHistory2               Match_History[]    @relation("playerTow")

}

model BlockUser {
  id             String    @id @default(uuid())
  userId         String
  blockedUserId  String
  createdAt      DateTime
  blockingUsers   User      @relation("blockingUsers", fields: [userId], references: [id])
  blockedByUsers    User      @relation("blockedByUsers", fields: [blockedUserId], references: [id])
}


model Friend {
  id String @id @default(uuid())
  user_id String
  friend_id String
  status Status @default(PENDING)
  created_at DateTime
  user User @relation("UserToFriend", fields: [user_id], references: [id])
  friends User @relation("Friend", fields: [friend_id], references: [id])
}

model ChatParticipents {
  id          String      @id @default(uuid())
  senderId    String
  recipientId String
  vue         Boolean     @default(false)
  unreadMessageCount Int  @default(0)
  lastMessageId String?
  createdAt   DateTime    @default(now())
  recipient   User        @relation("recipient", fields: [recipientId], references: [id])
  messages    Message[]   @relation("participentsMessages")
  lastMessage Message?    @relation("lastMessageSent", fields: [lastMessageId], references: [id])
  sender      User        @relation("sender", fields: [senderId], references: [id])
}

model Message {
  id String @id @default(uuid())
  vue Boolean  @default(false)
  content String?
  senderId String
  participentsId String
  createdAt DateTime @default(now())
  lastMessageFor ChatParticipents[] @relation("lastMessageSent")
  participents ChatParticipents @relation("participentsMessages", fields: [participentsId], references: [id])
  sender User @relation("senderMessage", fields: [senderId], references: [id])
}




model Session {
  id String @id @default(uuid())
  sid String @unique
  data String
  expiresAt DateTime
}



model NotificationGlobal {
  id String @id @default(uuid())
  Sender_id String
  recipient_id String
  requestId String
  content String
  type String
  vue Boolean @default(false)
  created_at   DateTime        @default(now())
  image_content String
  Sender User @relation("sender",fields: [Sender_id], references: [id])
  recipient User @relation("recipient",fields: [recipient_id], references: [id])

}

model NotificationMessage{
  id String @id @default(uuid())
  roomId String
  userId String
  number Int @default(0)
  UserId User @relation("senderMessage",fields: [userId], references: [id])
}



model ChatRoom {
  id        String @id @default(uuid())
  name      String    @unique
  Privacy   String   
  password  String?
  picture   String?   @default("https://images.squarespace-cdn.com/content/v1/5f60d7057b9b7d7609ef628f/1603219780222-V253F1WLHBH8HNHXIFUX/group.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]
  messageRome  MessageRome[]

}

model Member {
  id          String @id @default(uuid())
  user_id     String
  chatRoomId  String
  Status      String @default("Member") //Ban // Mut // Admin // owner
  user        User        @relation(fields: [user_id], references: [id])
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id])
}

model MessageRome{
  id          String @id @default(uuid())
  content     String
  chatRoomId  String
  senderId    String
  createdAt   DateTime @default(now())
  user        User        @relation(fields: [senderId], references: [id])
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id])

}
model requestPlay{
  id String @id @default(uuid())
  senderId   String
  recipientId String
  Sender User @relation("sender_playing",fields: [senderId], references: [id])
  recipient User @relation("recipient_playing",fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())
  status Status @default(PENDING)  
}

model blockList{
  id String @id @default(uuid())
  userOneId String
  userTwoId String
  userOne User @relation("userOne",fields: [userOneId], references: [id])
  userTwo User @relation("userTwo", fields: [userTwoId], references: [id])
}

model Match_History {
  id         String   @id @default(uuid())
  playerOne  String
  playerTwo  String
  resultOne  Int
  resultTwo  Int
  createdAt  DateTime @default(now())
  playerone  User     @relation("playerOne", fields: [playerOne], references: [id])
  playertwo  User     @relation("playerTow", fields: [playerTwo], references: [id])
  duration   String   @default("00:00:00")
}

model StateGame {
  id         String @id @default(uuid())
  user_id    String @unique
  totalMatch Int    @default(0)
  win        Int    @default(0)
  lose       Int    @default(0)
  level      Float  @default(0.00)
  rating     Int    @default(1200)
  user       User   @relation(fields: [user_id], references: [id])
}



